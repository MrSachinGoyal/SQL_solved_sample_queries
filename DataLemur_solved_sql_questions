# Question: 
Assume you are given the table below on Uber transactions made by users. Write a query to obtain the third transaction of every user. 
Output the user id, spend and transaction date.

>> Creating the Table:
CREATE TABLE transactions (
  user_id INTEGER,
  spend DECIMAL,
  transaction_date TIMESTAMP
);

>> Inserting Data:
INSERT INTO transactions (user_id, spend, transaction_date)
VALUES
  (111, 100.50, '2022-01-08 12:00:00'),
  (111, 55.00, '2022-01-10 12:00:00'),
  (121, 36.00, '2022-01-18 12:00:00'),
  (145, 24.99, '2022-01-26 12:00:00'),
  (111, 89.60, '2022-02-05 12:00:00');

>> My Solution:
WITH transaction_rank AS (SELECT *,
                          ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY transaction_date ASC) AS transaction_number
                          FROM transactions)
  
SELECT user_id, spend, transaction_date
FROM transaction_rank
WHERE transaction_number = 3;


# Question:
Assume you're given tables with information on Snapchat users, including their ages and time spent sending and opening snaps.
Write a query to obtain a breakdown of the time spent sending vs. opening snaps as a percentage of total time spent on these activities grouped by age group. 
Round the percentage to 2 decimal places in the output.

Notes:
Calculate the following percentages:
time spent sending / (Time spent sending + Time spent opening)
Time spent opening / (Time spent sending + Time spent opening)
To avoid integer division in percentages, multiply by 100.0 and not 100.

>> Creating the Table:
CREATE TABLE activities (
activity_id INTEGER,
user_id INTEGER,
activity_type VARCHAR(10),
time_spent FLOAT,
activity_date TIMESTAMP
);

CREATE TABLE age_breakdown (
user_id INTEGER,
age_bucket VARCHAR(10)
);

>> Inserting Data:
INSERT INTO activities (activity_id, user_id, activity_type, time_spent, activity_date)
VALUES
(7274, 123, 'open', 4.50, '2022-06-22 12:00:00'),
(2425, 123, 'send', 3.50, '2022-06-22 12:00:00'),
(1413, 456, 'send', 5.67, '2022-06-23 12:00:00'),
(1414, 789, 'chat', 11.00, '2022-06-25 12:00:00'),
(2536, 456, 'open', 3.00, '2022-06-25 12:00:00');

INSERT INTO age_breakdown (user_id, age_bucket)
VALUES
(123, '31-35'),
(456, '26-30'),
(789, '21-25');

>> My Solution:
WITH cte AS (SELECT t1.age_bucket, t2.user_id, t2.activity_type, t2.time_spent,
      			 SUM(time_spent) OVER(PARTITION BY age_bucket ORDER BY age_bucket ASC) AS total_time_spent
      			 FROM age_breakdown t1
      			 INNER JOIN 
      			 activities t2
      			 ON t1.user_id = t2.user_id
      			 WHERE activity_type IN ('send', 'open'))
			
SELECT age_bucket,
ROUND(SUM(CASE WHEN activity_type = 'send' THEN (time_spent*100.0)/total_time_spent ELSE NULL END),2) AS send_percent,
ROUND(SUM(CASE WHEN activity_type = 'open' THEN (time_spent*100.0)/total_time_spent ELSE NULL END),2) AS open_percent
FROM cte
GROUP BY age_bucket;
